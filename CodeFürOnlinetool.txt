import java.util.*;

import java.io.*;
import java.util.*;

public class Main {
    public static ReadDataFromScanner scanner=new ReadDataFromScanner();
    public static void main(String[] args) throws Exception {
             
        Hauptprogramm.initialisiereMenue();
    }
}



class Spielfeld {
     public int feld[][] = null;    
        public Spielfeld(int x, int y)
        {
            feld = new int[x][y];
            for(int i=0; i < feld.length; i++)
            {
                for(int j=0; j < feld[i].length; j++)
                {
                    feld[i][j] = 0;
                }
            }
        }
        public boolean setzeSpielstein(int spielerNr, int spalte)
        {
            int x = feld.length-1;
            boolean fortsetzen = true;
            while(x >= 0 && fortsetzen == true)
            {
                if(feld[x][spalte] == 0 )
                {
                feld[x][spalte] = spielerNr;
                fortsetzen = false;
                }
                x--;
            }
            if(x < 0)
            {
                System.out.println("Der Stein konnte nicht gesetzt werden!");
                return false;
            }
            return true;
        }
        public void ausgabeSpielfeld()
        {
            for(int i=0; i < feld.length; i++) // zeilenangabe
            {
                for(int j=0; j < feld[i].length; j++) // spaltenangabe
                {
                    System.out.print("| " + feld[i][j] + " |");
                }
                System.out.println();
            }
        }
        public boolean unentschieden()
        {
            boolean returnwert = false;
            if(getAnzahlGesetzterSteine() == feld.length*feld[0].length)
            {
                returnwert = true;
            }
            return returnwert;
        }
        public int getAnzahlGesetzterSteine()
        {
            int anzSteine = 0;
            for(int i=0; i < feld.length; i++) // zeile
            {
                for(int j=0; j < feld[i].length; j++) // spalte
                {
                    if(feld[i][j] != 0) // ist da ein Spielstein drin
                    {
                        anzSteine++;
                    }
                }
            }
            return anzSteine;
        }
        public boolean testeReihe(int spielerNr)
        {
            boolean returnwert = false;
            for(int x=0; x < feld.length; x++) // welche Zahl steckt hinter feld.length - ist die richtig?
            {
                for(int y=0; y < feld.length; y++) // welche Zahl steckt hinter feld.length - ist die richtig?
                {
                    if(testeHorizontal(x,y,spielerNr) == true || testeVertikal(x,y,spielerNr) == true || testeQuer(x,y,spielerNr) == true )
                    {                               // geben Sie zusätzlich aus, wo der Treffer ist
                        returnwert = true;
                    }
                    
                }
            }
            return returnwert;
        }
        public boolean testeReihe2(int spielerNr) // Spielernummer für den geschaut werden soll
        {
            boolean returnwert = false;
            if(getAnzahlGesetzterSteine() >= 7) // unter 7 Steinen kann noch keiner gewonnen haben
            {
                for(int i=0; i < feld.length; i++) // zeile
                {
                    for(int j=0; j < feld.length; j++)// spalten
                    {
                        if(testeHorizontal(i,j,spielerNr) == true || testeVertikal(i,j,spielerNr) == true || testeQuer(i,j,spielerNr) == true )
                        {
                            returnwert = true;
                        }
                        
                    }
                }
            }
            return returnwert;
        }
        public boolean testeReihe3(int spielerNr)
        {
            if(getAnzahlGesetzterSteine() >= 7)
            {
                for(int i=0; i < feld.length; i++) // zeile
                {
                    for(int j=0; j < feld.length; j++)// spalten
                    {
                        if(testeHorizontal(i,j,spielerNr) == true || testeVertikal(i,j,spielerNr) == true || testeQuer(i,j,spielerNr) == true )
                        {
                            return true;
                        }
                        
                    }
                }
            }
            return false;
        }
        public boolean testeHorizontal(int x, int y, int Spieler)
        {
            boolean returnwert = false;
            if(y + 3 < feld[x].length)
            {
                if(feld[x][y] == Spieler && feld[x][y+1] == Spieler && feld[x][y+2] == Spieler && feld[x][y+3] == Spieler)
                {
                returnwert = true;
                }
            }  
            return returnwert;
        }
        public boolean testeVertikal(int x, int y, int Spieler)
        {
            boolean returnwert = false;
            if(x + 3 < feld.length)
            {
                if(feld[x][y] == Spieler && feld[x+1][y] == Spieler && feld[x+2][y] == Spieler && feld[x+3][y] == Spieler)
                {
                returnwert = true;
                }
            }  
            return returnwert;
        }
        public boolean testeQuer(int x, int y, int Spieler)
        {
            boolean returnwert = false;
            if(x + 3 < feld.length && y + 3 < feld.length)
            {
                if(feld[x][y] == Spieler && feld[x+1][y+1] == Spieler && feld[x+2][y+2] == Spieler && feld[x+3][y+3] == Spieler)
                {
                returnwert = true;
                }
            }  
            if(x - 3 >= 0 && y + 3 < feld.length)
            {
                if(feld[x][y] == Spieler && feld[x-1][y+1] == Spieler && feld[x-2][y+2] == Spieler && feld[x-3][y+3] == Spieler)
                {
                returnwert = true;
                }
            }  
            return returnwert;
        }
}


class Spieler {
    int spielernummer;
    String speilername;
    public Spieler(String name, int nummer){
        spielernummer=nummer;
        speilername=name;
    }
    private Spieler(){
    }
    public String getName(){
        return speilername;
    }
    public int getSpielerNr(){
        return spielernummer;
    }
}

class PCSpieler extends Spieler{
    public PCSpieler(String name, int nummer){
        super(name,nummer);
    }
    public static int setzeNächstenSteinInZufälligeSpalte(){
        return (int)(Math.random() * 7);
    }
    public static int setzeNächstenSteinWennBacktrackingEineLösungHatSonstBEENDEN(Spielfeld sp){
        int retvalue=8;
        
        sp.feld[1][1];
        
        return retvalue;
    }
}


 class Hauptprogramm {
    public static void initialisiereSpielmenue(int zeile, int spalte)
    {
        Spielfeld sp1 = new Spielfeld(zeile,spalte);
        Spieler spieler2;
        System.out.println("Bitte Spielernamen für Spieler 1 eingeben");
        Spieler spieler1 = new Spieler(Main.scanner.readString(), 1);
        System.out.println("Bitte Spielernamen für Spieler 2 eingeben bzw \"PC\" wenn Sie gegen den PC Speilen wollen:");
        String name= Main.scanner.readString();
        if (0==name.compareToIgnoreCase("PC"))
            spieler2= new PCSpieler(name, 2);
        else
            spieler2= new Spieler(name, 2);
        Spieler aktuellerSpieler = spieler1;
        
        // Spielfeld ausgaben
        do
        {
            int eingabe;
            if (0 != aktuellerSpieler.getName().compareToIgnoreCase("PC"))
            {
                System.out.println(aktuellerSpieler.getName() + ", Sie sind an der Reihe!");
                System.out.println();
                 
                sp1.ausgabeSpielfeld();
                 
                System.out.println();
                System.out.println("Bitte wählen Sie die Spalte aus! (Wert zwischen 1 und " + spalte + ")");
                System.out.println("bei Eingaben über " + (spalte+1) + " wird das Spiel beendet!");
                eingabe = Main.scanner.read()-1; 
            }
            else // Spieler ist der PC
            {
                System.out.println();
                System.out.println("Spieler PC:");
                //eingabe = 2; //ToDo
                //eingabe=PCSpieler.setzeNächstenSteinInZufälligeSpalte()-1;
                eingabe=PCSpieler.setzeNächstenSteinWennBacktrackingEineLösungHatSonstBEENDEN( sp1 )-1;
            }
            if(eingabe >= 0 && eingabe < spalte)
            {
                if (sp1.setzeSpielstein(aktuellerSpieler.getSpielerNr(), eingabe)){
                if(aktuellerSpieler.getSpielerNr() == 1)
                    {
                    aktuellerSpieler = spieler2;
                    }
                else
                {
                    aktuellerSpieler = spieler1;
                }
                }else{
                    System.out.println("Zeile schon voll - geht nicht - NOCHMAL!");
                }
            }
            else
            {
                beendeSpiel();
            }
            
        } while(sp1.unentschieden() == false && sp1.testeReihe(aktuellerSpieler.getSpielerNr()) == false);
         
        System.out.println("Herzlichen Glückwunsch, " + aktuellerSpieler.getName() + " hat gewonnen!!");
         
        beendeSpiel();
    }
    public static void initialisiereMenue()
    {
     
        System.out.println("Willkommen bei 4 Gewinnt!");
        System.out.println();
        System.out.println("Spiel beginnen: [1]");
        System.out.println("Spiel beenden:  [beliebige Eingabe]");
         
         
        int eingabe = Main.scanner.read();
        if(eingabe == 1)
        {
            Hauptprogramm.initialisiereSpielmenue(6,7);
        }
        else
        {
            beendeSpiel();
        }
    }
     
    public static void beendeSpiel()
    {
        System.exit(0);
    }
}

// Hilfsklasse zum einlesen mit: https://www.tutorialspoint.com/compile_java_online.php
class ReadDataFromScanner {
   public static Scanner scanner = new Scanner(System.in);
   public static int read () {
      return Integer.parseInt(scanner.nextLine());
   }
   public static String readString () {
      return scanner.nextLine();
   }
}
